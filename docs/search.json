[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Mining 2025",
    "section": "",
    "text": "Ce document est la cinquième édition d’un cours de Data Mining dispensé aux étudiants de deuxième année de l’ option Data Mining du master MECI conjointement avec Camille Signoretto.\nIl est basé sur :\n\n\n[1] \"R version 4.4.1 (2024-06-14)\"\n\n\nCe document est régulièrement corrigé et mis à jour. La version de référence est disponible en ligne à l’adresse :\n\nhttps://worldregio.github.io/datamining2024/.\n\nPour toute suggestion ou correction, il est possible de me contacter par mail"
  },
  {
    "objectID": "index.html#à-propos-de-ce-document",
    "href": "index.html#à-propos-de-ce-document",
    "title": "Data Mining 2025",
    "section": "",
    "text": "Ce document est la cinquième édition d’un cours de Data Mining dispensé aux étudiants de deuxième année de l’ option Data Mining du master MECI conjointement avec Camille Signoretto.\nIl est basé sur :\n\n\n[1] \"R version 4.4.1 (2024-06-14)\"\n\n\nCe document est régulièrement corrigé et mis à jour. La version de référence est disponible en ligne à l’adresse :\n\nhttps://worldregio.github.io/datamining2024/.\n\nPour toute suggestion ou correction, il est possible de me contacter par mail"
  },
  {
    "objectID": "index.html#prérequis",
    "href": "index.html#prérequis",
    "title": "Data Mining 2025",
    "section": "Prérequis",
    "text": "Prérequis\nLe seul prérequis pour suivre ce document est d’avoir installé R et RStudio sur votre ordinateur. Il s’agit de deux logiciels libres, gratuits, téléchargeables en ligne et fonctionnant sous PC, Mac et Linux.\nPour installer R, il suffit de se rendre sur une des pages suivantes 1 :\n\nInstaller R sous Windows\nInstaller R sous Mac\n\nPour installer RStudio, rendez-vous sur la page suivante et téléchargez la version adaptée à votre système :\n\nhttps://www.rstudio.com/products/rstudio/download/#download"
  },
  {
    "objectID": "index.html#remerciements",
    "href": "index.html#remerciements",
    "title": "Data Mining 2025",
    "section": "Remerciements",
    "text": "Remerciements\nCe document a bénéficié de la relecture et des suggestions … des étudiants qui en ont été les cobayes des premières versions."
  },
  {
    "objectID": "index.html#licence",
    "href": "index.html#licence",
    "title": "Data Mining 2025",
    "section": "Licence",
    "text": "Licence\nCe document est mis à disposition selon les termes de la Licence Creative Commons Attribution - Pas d’Utilisation Commerciale - Partage dans les Mêmes Conditions 4.0 International.\n\n\n\nLicence Creative Commons"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Data Mining 2025",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSous Linux, utilisez votre gestionnaire de packages habituel.↩︎"
  },
  {
    "objectID": "10-API-Theorie.html",
    "href": "10-API-Theorie.html",
    "title": "API : Théorie",
    "section": "",
    "text": "library(knitr,warn.conflicts = T,quietly = T)\nlibrary(dplyr, warn.conflicts = T,quietly = T)"
  },
  {
    "objectID": "10-API-Theorie.html#quest-ce-quune-api",
    "href": "10-API-Theorie.html#quest-ce-quune-api",
    "title": "API : Théorie",
    "section": "Qu’est-ce qu’une API ?",
    "text": "Qu’est-ce qu’une API ?\n\nDéfinition\nOn peut partir de la définition suivante:\n\nEn informatique, API est l’acronyme d’Application Programming Interface, que l’on traduit en français par interface de programmation applicative ou interface de programmation d’application. L’API peut être résumée à une solution informatique qui permet à des applications de communiquer entre elles et de s’échanger mutuellement des services ou des données. Il s’agit en réalité d’un ensemble de fonctions qui facilitent, via un langage de programmation, l’accès aux services d’une application. (Source : Journal du Net)\n\n\n\nFonctions\nUne API peut remplir des fonctions très diverses :\n\nDans le domaine d’internet, l’API permet aux développeurs de pouvoir utiliser un programme sans avoir à se soucier du fonctionnement complexe d’une application. Les API peuvent par exemple être utilisées pour déclencher des campagnes publicitaires d’e-mailing de façon automatique sans avoir à passer par la compréhension d’une telle application (c’est le cas avec l’API AdWords de Google, par exemple). On les retrouve aujourd’hui dans de nombreux logiciels, en particulier dans les systèmes d’exploitation, les serveurs d’applications, dans le monde du graphisme (OpenGL), dans les applications SaaS (Office 365, G Suite, Salesforce…), les bases de données, l’open data, etc.(Source : Journal du Net)\n\n\n\nProtocoles\nD’une manière générale, les API supposent un échange d’informations entre un client et un serveur.\n\nCes échanges d’informations suivent un protocole c’est-à-dire un ensemble de règles. Il existe deux grands protocoles de communication sur lesquels s’adossent les API : Simple Object Access Protocol (SOAP) et Representational State Transfer (REST). Le second s’est désormais largement imposé face au premier car il est plus flexible. Il a donné naissance aux API dites REST ou RESTful (Source : Journal du Net)\n\n\n\nData Science\nLe métier de data analyst implique presque nécessairement l’emploi d’API. Les langages de programmation R ou Python ont donc l’un comme l’autre mis au point des packages pour faciliter l’envoi de requêtes sur des serveurs dotés d’API.\n\n«API» est un terme général désignant le lieu où un programme informatique interagit avec un autre ou avec lui-même. Dans ce didacticiel, nous travaillerons spécifiquement avec des API Web, où deux ordinateurs différents - un client et un serveur - interagiront l’un avec l’autre pour demander et fournir des données, respectivement.\n\n\nLes API offrent aux scientifiques des données un moyen raffiné de demander des données propres et organisées à partir d’un site Web. Lorsqu’un site Web comme Facebook met en place une API, il met essentiellement en place un ordinateur qui attend les demandes de données.\n\n\nUne fois que cet ordinateur reçoit une demande de données, il effectuera son propre traitement des données et les enverra à l’ordinateur qui l’a demandé. De notre point de vue en tant que demandeur, nous devrons écrire du code dans R qui crée la demande et indique à l’ordinateur exécutant l’API ce dont nous avons besoin. Cet ordinateur lira ensuite notre code, traitera la requête et renverra des données bien formatées qui peuvent être facilement analysées par les bibliothèques R existantes.\n\n\nPourquoi est-ce précieux? Comparez l’approche API au scraping Web pur. Lorsqu’un programmeur gratte une page Web, il reçoit les données dans un morceau de HTML désordonné. Bien qu’il existe certainement des bibliothèques qui facilitent l’analyse du texte HTML, ce sont toutes des étapes de nettoyage qui doivent être prises avant même de mettre la main sur les données que nous voulons!\n\n\nSouvent, nous pouvons immédiatement utiliser les données que nous obtenons d’une API, ce qui nous fait gagner du temps et de la frustration.\n\nSource : Traduction française d’un billet de Pascual C., 2020"
  },
  {
    "objectID": "10-API-Theorie.html#exemple-dutilisation",
    "href": "10-API-Theorie.html#exemple-dutilisation",
    "title": "API : Théorie",
    "section": "Exemple d’utilisation",
    "text": "Exemple d’utilisation\nA titre d’exemple, C. Pascual propose de travailler avec l’API Open Notify, qui donne accès à des données sur divers projets de la NASA. À l’aide de l’API Open Notify, nous pouvons notamment en savoir plus sur l’emplacement de la Station spatiale internationale et sur le nombre de personnes actuellement dans l’espace.\n\nInstaller les packages jsonlite et httr\nPour travailler avec des API dans R, nous devons intégrer certaines bibliothèques (library). Ces bibliothèques prennent toutes les complexités d’une requête d’API et les enveloppent dans des fonctions que nous pouvons utiliser dans des lignes de code uniques. Les bibliothèques R que nous utiliserons sont httr et jsonlite. Elles remplissent des rôles différents dans notre introduction des API, mais les deux sont essentiels.Si vous ne disposez pas de ces bibliothèques dans votre console R ou RStudio, vous devez d’abord les télécharger.\n\nlibrary(httr)\nlibrary(jsonlite)\n\n\n\nFormulation d’une requête GET()\nUne requête adressé à une API va suivre le schéma suivant :\n\nknitr::include_graphics(\"img/API_GET.png\",)\n\n\n\n\nIl existe plusieurs types de requêtes que l’on peut adresser à un serveur API. Pour nos besoins, nous allons simplement demander des données, ce qui correspond à une demande GET. Les autres types de requêtes sont POST et PUT, mais nous n’avons pas à nous en préoccuper dans l’immédiat\nAfin de créer une requête GET, nous devons utiliser la fonction GET() de la bibliothèque httr. La fonction GET() nécessite une URL, qui spécifie l’adresse du serveur auquel la demande doit être envoyée.\nNotre programme télécharge les données disponibles à l’adresse du serveur et les stocke dans un objet auquel on peut donner le nom que l’on souhaite, par exemple ovni dans la mesure où le résultat est de prime abord assez mystérieux…\n\novni &lt;- GET(\"http://api.open-notify.org/astros.json\")\nclass(ovni)\n\n[1] \"response\"\n\n\nOn sait que la classe de l’objet est de type response ce qui ne nous avance pas beaucoup.\nToutefois, si on demande à l’objet de s’afficher il nous apporte quatre renseignements utiles\n\novni\n\nResponse [http://api.open-notify.org/astros.json]\n  Date: 2025-02-11 15:09\n  Status: 200\n  Content-Type: application/json\n  Size: 587 B\n\n\n\nDate : le moment exact du téléchargement, très utile pour suivre les mises à jour\nStatus : le code informatique de résultat de la requête. La valeur 200 indique un succès alors que les autres valeurs signaleront un problème.\nContent-Type : le type d’information recueillie. Ici, une application au format json\nSize : la taille du fichier résultant du transfert.\n\nOn poursuit notre enquête en tapant la commande str() qui permet d’avoir plus de détail sur le contenu de l’objet.\n\nstr(ovni)\n\nList of 10\n $ url        : chr \"http://api.open-notify.org/astros.json\"\n $ status_code: int 200\n $ headers    :List of 6\n  ..$ server                     : chr \"nginx/1.10.3\"\n  ..$ date                       : chr \"Tue, 11 Feb 2025 15:09:25 GMT\"\n  ..$ content-type               : chr \"application/json\"\n  ..$ content-length             : chr \"587\"\n  ..$ connection                 : chr \"keep-alive\"\n  ..$ access-control-allow-origin: chr \"*\"\n  ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\"\n $ all_headers:List of 1\n  ..$ :List of 3\n  .. ..$ status : int 200\n  .. ..$ version: chr \"HTTP/1.1\"\n  .. ..$ headers:List of 6\n  .. .. ..$ server                     : chr \"nginx/1.10.3\"\n  .. .. ..$ date                       : chr \"Tue, 11 Feb 2025 15:09:25 GMT\"\n  .. .. ..$ content-type               : chr \"application/json\"\n  .. .. ..$ content-length             : chr \"587\"\n  .. .. ..$ connection                 : chr \"keep-alive\"\n  .. .. ..$ access-control-allow-origin: chr \"*\"\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\"\n $ cookies    :'data.frame':    0 obs. of  7 variables:\n  ..$ domain    : logi(0) \n  ..$ flag      : logi(0) \n  ..$ path      : logi(0) \n  ..$ secure    : logi(0) \n  ..$ expiration: 'POSIXct' num(0) \n  ..$ name      : logi(0) \n  ..$ value     : logi(0) \n $ content    : raw [1:587] 7b 22 70 65 ...\n $ date       : POSIXct[1:1], format: \"2025-02-11 15:09:25\"\n $ times      : Named num [1:6] 0 0.00518 3.15661 3.15746 3.32221 ...\n  ..- attr(*, \"names\")= chr [1:6] \"redirect\" \"namelookup\" \"connect\" \"pretransfer\" ...\n $ request    :List of 7\n  ..$ method    : chr \"GET\"\n  ..$ url       : chr \"http://api.open-notify.org/astros.json\"\n  ..$ headers   : Named chr \"application/json, text/xml, application/xml, */*\"\n  .. ..- attr(*, \"names\")= chr \"Accept\"\n  ..$ fields    : NULL\n  ..$ options   :List of 2\n  .. ..$ useragent: chr \"libcurl/8.11.1 r-curl/6.2.0 httr/1.4.7\"\n  .. ..$ httpget  : logi TRUE\n  ..$ auth_token: NULL\n  ..$ output    : list()\n  .. ..- attr(*, \"class\")= chr [1:2] \"write_memory\" \"write_function\"\n  ..- attr(*, \"class\")= chr \"request\"\n $ handle     :Class 'curl_handle' &lt;externalptr&gt; \n - attr(*, \"class\")= chr \"response\"\n\n\nNous savons désormais que notre objet ovni est une liste comportant 10 branches, elles-mêmes divisées en sous branches qui peuvent être elles-même des listes…\n\n\nRemarque sur les listes\nLes listes sont des objets complexes mais fondamentaux pour la programmation en R. On peut accèder aux branches d’une liste soit en utilisant une série de $ soit en se servant de doubles crochets [[ ]]. Par exemple, si on veut accèder à la date de la réponse on peut taper au choix :\n\novni$headers$date\n\n[1] \"Tue, 11 Feb 2025 15:09:25 GMT\"\n\novni[[\"headers\"]][[\"date\"]]\n\n[1] \"Tue, 11 Feb 2025 15:09:25 GMT\"\n\n\nOn peut également afficher les noms des branches en partant de la racine puis en suivant l’arbre à l’aide de l’instruction names()\n\nnames(ovni$headers)\n\n[1] \"server\"                      \"date\"                       \n[3] \"content-type\"                \"content-length\"             \n[5] \"connection\"                  \"access-control-allow-origin\"\n\n\n\nnames(ovni$fields)\n\nNULL\n\n\n\n\nExtraction des données\nLes données contenues dans la réponse ont été stockées au format JSON (JavaScript Object Notation) qui est devenu un standard pour les échanges de données. Mais elles ont été ensuite comprimées en format binaire pour limiter la taille du fichier transféré. Il va donc falloir procéder en quatre étapes pour les extraire\n\nétape 1 : récupérer les données au format binaire\nOn extrait le champ de données dans la liste. Le résultat est assez étrange :\n\nlibrary(rvest)\ndon_bin&lt;-ovni$content\ndon_bin\n\n  [1] 7b 22 70 65 6f 70 6c 65 22 3a 20 5b 7b 22 63 72 61 66 74 22 3a 20 22 49 53\n [26] 53 22 2c 20 22 6e 61 6d 65 22 3a 20 22 4f 6c 65 67 20 4b 6f 6e 6f 6e 65 6e\n [51] 6b 6f 22 7d 2c 20 7b 22 63 72 61 66 74 22 3a 20 22 49 53 53 22 2c 20 22 6e\n [76] 61 6d 65 22 3a 20 22 4e 69 6b 6f 6c 61 69 20 43 68 75 62 22 7d 2c 20 7b 22\n[101] 63 72 61 66 74 22 3a 20 22 49 53 53 22 2c 20 22 6e 61 6d 65 22 3a 20 22 54\n[126] 72 61 63 79 20 43 61 6c 64 77 65 6c 6c 20 44 79 73 6f 6e 22 7d 2c 20 7b 22\n[151] 63 72 61 66 74 22 3a 20 22 49 53 53 22 2c 20 22 6e 61 6d 65 22 3a 20 22 4d\n[176] 61 74 74 68 65 77 20 44 6f 6d 69 6e 69 63 6b 22 7d 2c 20 7b 22 63 72 61 66\n[201] 74 22 3a 20 22 49 53 53 22 2c 20 22 6e 61 6d 65 22 3a 20 22 4d 69 63 68 61\n[226] 65 6c 20 42 61 72 72 61 74 74 22 7d 2c 20 7b 22 63 72 61 66 74 22 3a 20 22\n[251] 49 53 53 22 2c 20 22 6e 61 6d 65 22 3a 20 22 4a 65 61 6e 65 74 74 65 20 45\n[276] 70 70 73 22 7d 2c 20 7b 22 63 72 61 66 74 22 3a 20 22 49 53 53 22 2c 20 22\n[301] 6e 61 6d 65 22 3a 20 22 41 6c 65 78 61 6e 64 65 72 20 47 72 65 62 65 6e 6b\n[326] 69 6e 22 7d 2c 20 7b 22 63 72 61 66 74 22 3a 20 22 49 53 53 22 2c 20 22 6e\n[351] 61 6d 65 22 3a 20 22 42 75 74 63 68 20 57 69 6c 6d 6f 72 65 22 7d 2c 20 7b\n[376] 22 63 72 61 66 74 22 3a 20 22 49 53 53 22 2c 20 22 6e 61 6d 65 22 3a 20 22\n[401] 53 75 6e 69 74 61 20 57 69 6c 6c 69 61 6d 73 22 7d 2c 20 7b 22 63 72 61 66\n[426] 74 22 3a 20 22 54 69 61 6e 67 6f 6e 67 22 2c 20 22 6e 61 6d 65 22 3a 20 22\n[451] 4c 69 20 47 75 61 6e 67 73 75 22 7d 2c 20 7b 22 63 72 61 66 74 22 3a 20 22\n[476] 54 69 61 6e 67 6f 6e 67 22 2c 20 22 6e 61 6d 65 22 3a 20 22 4c 69 20 43 6f\n[501] 6e 67 22 7d 2c 20 7b 22 63 72 61 66 74 22 3a 20 22 54 69 61 6e 67 6f 6e 67\n[526] 22 2c 20 22 6e 61 6d 65 22 3a 20 22 59 65 20 47 75 61 6e 67 66 75 22 7d 5d\n[551] 2c 20 22 6e 75 6d 62 65 72 22 3a 20 31 32 2c 20 22 6d 65 73 73 61 67 65 22\n[576] 3a 20 22 73 75 63 63 65 73 73 22 7d\n\n\n\n\nétape 2 : convertir les données binaires au format caractère\nLa conversion est effectuée à l’aide de la fonction rawToChar() qui fait partie de R-Base.\n\n# conversion du contenu de toto en mode character\ndon_car&lt;-rawToChar(don_bin)\ndon_car\n\n[1] \"{\\\"people\\\": [{\\\"craft\\\": \\\"ISS\\\", \\\"name\\\": \\\"Oleg Kononenko\\\"}, {\\\"craft\\\": \\\"ISS\\\", \\\"name\\\": \\\"Nikolai Chub\\\"}, {\\\"craft\\\": \\\"ISS\\\", \\\"name\\\": \\\"Tracy Caldwell Dyson\\\"}, {\\\"craft\\\": \\\"ISS\\\", \\\"name\\\": \\\"Matthew Dominick\\\"}, {\\\"craft\\\": \\\"ISS\\\", \\\"name\\\": \\\"Michael Barratt\\\"}, {\\\"craft\\\": \\\"ISS\\\", \\\"name\\\": \\\"Jeanette Epps\\\"}, {\\\"craft\\\": \\\"ISS\\\", \\\"name\\\": \\\"Alexander Grebenkin\\\"}, {\\\"craft\\\": \\\"ISS\\\", \\\"name\\\": \\\"Butch Wilmore\\\"}, {\\\"craft\\\": \\\"ISS\\\", \\\"name\\\": \\\"Sunita Williams\\\"}, {\\\"craft\\\": \\\"Tiangong\\\", \\\"name\\\": \\\"Li Guangsu\\\"}, {\\\"craft\\\": \\\"Tiangong\\\", \\\"name\\\": \\\"Li Cong\\\"}, {\\\"craft\\\": \\\"Tiangong\\\", \\\"name\\\": \\\"Ye Guangfu\\\"}], \\\"number\\\": 12, \\\"message\\\": \\\"success\\\"}\"\n\n\nOn commence à mieux voir le résultat mais ce n’est pas encore très lisible car il s’agit de données au format JSON\n\n\nétape 3 : convertir les données JSON en objet R\nOn convertit les données de type JSON en données utilisables par R à l’aide de la fonction fromJson() du package jsonlite()\n\ndon_R &lt;- fromJSON(don_car)\nstr(don_R)\n\nList of 3\n $ people :'data.frame':    12 obs. of  2 variables:\n  ..$ craft: chr [1:12] \"ISS\" \"ISS\" \"ISS\" \"ISS\" ...\n  ..$ name : chr [1:12] \"Oleg Kononenko\" \"Nikolai Chub\" \"Tracy Caldwell Dyson\" \"Matthew Dominick\" ...\n $ number : int 12\n $ message: chr \"success\"\n\n\nOn obtient finalement une liste de trois éléments dont le dernier est un data.frame décrivant les astronautes présents dans la station spatiale internationale au moment de l’execution du programme.\n\n\nétape 4 : Récupérer le tableau de résultats\n\ntab&lt;-don_R$people\nkable(tab,caption = \"Passagers de l'ISS en temps réel\")\n\n\nPassagers de l’ISS en temps réel\n\n\ncraft\nname\n\n\n\n\nISS\nOleg Kononenko\n\n\nISS\nNikolai Chub\n\n\nISS\nTracy Caldwell Dyson\n\n\nISS\nMatthew Dominick\n\n\nISS\nMichael Barratt\n\n\nISS\nJeanette Epps\n\n\nISS\nAlexander Grebenkin\n\n\nISS\nButch Wilmore\n\n\nISS\nSunita Williams\n\n\nTiangong\nLi Guangsu\n\n\nTiangong\nLi Cong\n\n\nTiangong\nYe Guangfu\n\n\n\n\n\n\n\n\nEcriture d’une fonction\nUne fois que l’on a bien compris la procédure d’extraction de cette API, on peut construire une fonction d’extraction pour simplifier la tâche et l’automatiser :\n\n## Fonction\nextract_ISS &lt;- function(){\n  ovni &lt;- GET(\"http://api.open-notify.org/astros.json\") \n  don_bin&lt;-ovni$content\n  don_char&lt;-rawToChar(don_bin)\n  don_R&lt;-fromJSON(don_char)\n  tab&lt;-don_R$people\n  return(tab)\n}\n\n## Application\nextract_ISS()\n\n      craft                 name\n1       ISS       Oleg Kononenko\n2       ISS         Nikolai Chub\n3       ISS Tracy Caldwell Dyson\n4       ISS     Matthew Dominick\n5       ISS      Michael Barratt\n6       ISS        Jeanette Epps\n7       ISS  Alexander Grebenkin\n8       ISS        Butch Wilmore\n9       ISS      Sunita Williams\n10 Tiangong           Li Guangsu\n11 Tiangong              Li Cong\n12 Tiangong           Ye Guangfu\n\n\nOn peut améliorer la fonction en lui faisant ajouter un champ qui indique la date à laquelle a été effectué le relevé :\n\n## Fonction\nextract_ISS2 &lt;- function(){\n  ovni &lt;- GET(\"http://api.open-notify.org/astros.json\") \n  don_bin&lt;-ovni$content\n  don_char&lt;-rawToChar(don_bin)\n  don_R&lt;-fromJSON(don_char)\n  tab&lt;-don_R$people\n  tab$date&lt;-ovni$headers$date\n  return(tab)\n}\n\n## Application\nextract_ISS2()\n\n      craft                 name                          date\n1       ISS       Oleg Kononenko Tue, 11 Feb 2025 15:09:26 GMT\n2       ISS         Nikolai Chub Tue, 11 Feb 2025 15:09:26 GMT\n3       ISS Tracy Caldwell Dyson Tue, 11 Feb 2025 15:09:26 GMT\n4       ISS     Matthew Dominick Tue, 11 Feb 2025 15:09:26 GMT\n5       ISS      Michael Barratt Tue, 11 Feb 2025 15:09:26 GMT\n6       ISS        Jeanette Epps Tue, 11 Feb 2025 15:09:26 GMT\n7       ISS  Alexander Grebenkin Tue, 11 Feb 2025 15:09:26 GMT\n8       ISS        Butch Wilmore Tue, 11 Feb 2025 15:09:26 GMT\n9       ISS      Sunita Williams Tue, 11 Feb 2025 15:09:26 GMT\n10 Tiangong           Li Guangsu Tue, 11 Feb 2025 15:09:26 GMT\n11 Tiangong              Li Cong Tue, 11 Feb 2025 15:09:26 GMT\n12 Tiangong           Ye Guangfu Tue, 11 Feb 2025 15:09:26 GMT\n\n\nEt si on est à l’aise avec les listes, on peut aussi exporter les résultats sous la forme d’une liste plutôt que d’un tableau, ce qui évite de répéter plusieurs fois la date d’extraction des données\n\n## Fonction\nextract_ISS3 &lt;- function(){\n  ovni &lt;- GET(\"http://api.open-notify.org/astros.json\") \n  don_bin&lt;-ovni$content\n  don_char&lt;-rawToChar(don_bin)\n  don_R&lt;-fromJSON(don_char)\n  tab&lt;-don_R$people\n  date&lt;-ovni$headers$date\n  result&lt;-list(\"Update\" = date,\"Data\" =tab)\n  return(result)\n}\n\n## Application\nx&lt;-extract_ISS3()\nkable(x$Data, caption=paste(\"Passagers de l'ISS :\", x$Update))\n\n\nPassagers de l’ISS : Tue, 11 Feb 2025 15:09:26 GMT\n\n\ncraft\nname\n\n\n\n\nISS\nOleg Kononenko\n\n\nISS\nNikolai Chub\n\n\nISS\nTracy Caldwell Dyson\n\n\nISS\nMatthew Dominick\n\n\nISS\nMichael Barratt\n\n\nISS\nJeanette Epps\n\n\nISS\nAlexander Grebenkin\n\n\nISS\nButch Wilmore\n\n\nISS\nSunita Williams\n\n\nTiangong\nLi Guangsu\n\n\nTiangong\nLi Cong\n\n\nTiangong\nYe Guangfu\n\n\n\n\n\n\n\nAPI et mise à jour en temps réel\nSur le site web du billet proposé par C. Pascual en février 2020, on trouve une autre liste ne comportant que 6 passagers et avec des noms totalement différents :\n\n\n\nPassagers de l’ISS en février 2020\n\n\ncraft\nname\n\n\n\n\nISS\nChristina Koch\n\n\nISS\nAlexander Skvortsov\n\n\nISS\nLuca Parmitano\n\n\nISS\nAndrew Morgan\n\n\nISS\nOleg Skripochka\n\n\nISS\nJessica Meir\n\n\n\n\n\nEn effet, l’API renvoie les résultats au moment de l’execution de la fonction GET() ce qui correspond à février 2020 pour le billet de blog. Or, les astronautes sont remplacés au plus tous les six mois ce qui explique que tous les noms soient différents un an après.\nNB : Cet exemple permet de mettre en évidence une fonction centrale des API qui est la mise à jour en temps réel des données !"
  },
  {
    "objectID": "11-API-Import-json.html",
    "href": "11-API-Import-json.html",
    "title": "API : Importation json",
    "section": "",
    "text": "Le but de ce chapitre n’est pas d’apprendre en détail l’ensemble des possibilités qu’offrent les API pour des utilisateurs avancés, mais de fournir aux étudiants en data mining un certain nombre de solutions simples (mais efficaces) pour extraire des données de façon interactive et assurer leur mise à jour régulière.\nOn charge les packages utiles :\nknitr::opts_chunk$set(echo = TRUE, warning= FALSE, message = FALSE, error=FALSE)\n\n## Affichage de tableaux\nlibrary(knitr)\n\n## Requêtes web\nlibrary(httr)\nlibrary(jsonlite)\n\n## Tidyverse & co\nlibrary(dplyr, warn.conflicts = T, quietly = T)\nlibrary(ggplot2)"
  },
  {
    "objectID": "11-API-Import-json.html#choix-dune-api",
    "href": "11-API-Import-json.html#choix-dune-api",
    "title": "API : Importation json",
    "section": "Choix d’une API",
    "text": "Choix d’une API\nLa première étape consiste à choisir l’API qui nous intéresse parmi plus de 600.\n\nLe site public.opendatasoft\nNous allons centrer notre chapitre sur le site public.opendatasoft qui permet d’accèder à des centaines d’API à l’aide de requêtes normalisées. Sans apprendre en détail le fonctionnement de cette API, on va montrer comment créer de petites fonctions facilitant le travail d’exportation des variables ou des données.\nOn peut se rendre sur le site pour parcourir les API proposées en allant à l’adresse : https://public.opendatasoft.com\n\n\n\n\n\n\n\nCatalogue des API\nPlutôt que de pacourir le site web, on peut télécharger le catalogue général des bases de données du site public.opendatasoft … en se servant d’une requête API\n\nx&lt;-GET('https://public.opendatasoft.com/api/datasets/1.0/search/?q=&rows=1000&start=0')\ny&lt;-fromJSON(rawToChar((x$content)))\ncat&lt;-y$datasets$metas\nrow.names(cat)&lt;-y$datasets$datasetid\nkable(head(cat[,c(12,1,6,7,8)]),row.names = T)\n\n\n\n\n\n\n\n\n\n\n\n\n\nlicense_url\ndomain\nlicense\ndescription\npublisher\n\n\n\n\nanalytical-house-prices-indicators\n\npublic\nCustom License (see reference link)\n\nOECD\n\n\nsirene-v3-liens-de-successions-siret\nhttps://www.etalab.gouv.fr/wp-content/uploads/2018/11/open-licence.pdf\npublic\nOpen License v2.0\n\nINSEE\n\n\nunix_domaine_professionnel_v324_utf8\nhttps://www.etalab.gouv.fr/wp-content/uploads/2014/05/Licence_Ouverte.pdf\npublic\nOpen License v1.0\n\nPôle Emploi\n\n\nworld-administrative-boundaries-countries\nhttp://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/\npublic\nOpen Government Licence v3.0\n\nBased on dataset published by : World Food Programme (UN agency)\n\n\ngeoref-italy-ripartizione-geografica\nhttps://creativecommons.org/licenses/by/3.0/\npublic\nCC BY 3.0\n\nOpendatasoft\n\n\ngeoref-italy-ripartizione-geografica-millesime\nhttps://creativecommons.org/licenses/by/3.0/\npublic\nCC BY 3.0\n\nOpendatasoft\n\n\n\n\n\nOn a donc récupéré un tableau qui comporte 605 lignes correspondant à 605 bases de données. Le nom des lignes du tableau indique le code de la base de données que l’on va utiliser ensuite dans les requêtes.\n\n\nChoix d’un tableau de données\nOn suppose que le choix s’est porté sur la base de données dont le nom de code est prix-des-carburants-j-1\n\n\n\n\n\nL’onglet information nous indique qu’il s’agit d’un site produit par le minstère de l’économie et des finances pour faciliter l’accès en temps réel au prix des carburants dans les stations services. Le but est d’informer les conosmmateurs des stations les moins chères à proximité de son domicile afin de stimuler la concurrence et faire baisser les prix.\nIl est indiqué que la base se limite aux prix des douze derniers mois mais nous avons pu vérifier qu’on trouve en fait des données sur plus de trois ans.\n\n\nListe des variables\nAvant de télécharger les données, on regarde précisément la liste des variables disponibles. On peut le faire sur le site web en parcourant les onglets. Mais il est également possible de lancer une requête pour connaître les variables du tableau que l’on va télécharger ainsi que les variables pouvant servir de “facettes” c’est-à-dire permettant d’effectuer des requêtes.\n\ntab&lt;-\"prix-des-carburants-j-1\"\nurl&lt;-paste(\"https://public.opendatasoft.com/api/v2/catalog/datasets/\",tab,\"?\",sep=\"\")\nx&lt;-GET(url)\ny&lt;-fromJSON(rawToChar(x$content))\nvar&lt;-y$dataset$fields\n\nhead(var)\n\n            name description annotations.facet annotations.multivalued\n1             id          NA                NA                    &lt;NA&gt;\n2             cp          NA              TRUE                    &lt;NA&gt;\n3            pop          NA              TRUE                    &lt;NA&gt;\n4        address          NA                NA                    &lt;NA&gt;\n5   com_arm_name          NA              TRUE                    &lt;NA&gt;\n6 automate_24_24          NA              TRUE                    &lt;NA&gt;\n  annotations.facetsort annotations.timeserie_precision annotations.unit\n1                  &lt;NA&gt;                            &lt;NA&gt;             &lt;NA&gt;\n2                  &lt;NA&gt;                            &lt;NA&gt;             &lt;NA&gt;\n3                  &lt;NA&gt;                            &lt;NA&gt;             &lt;NA&gt;\n4                  &lt;NA&gt;                            &lt;NA&gt;             &lt;NA&gt;\n5                  &lt;NA&gt;                            &lt;NA&gt;             &lt;NA&gt;\n6                  &lt;NA&gt;                            &lt;NA&gt;             &lt;NA&gt;\n  annotations.decimals\n1                   NA\n2                   NA\n3                   NA\n4                   NA\n5                   NA\n6                   NA\n                                                      label type\n1                                               Identifiant text\n2                                               Code Postal text\n3                                                  Présence text\n4                                                   Adresse text\n5 Nom Officiel Commune / Arrondissement Municipal Majuscule text\n6                                            Automate 24-24 text\n\n\nOn extrait du tableau les colonnes qui fournissent le nom des variables, leur définition et leur type\n\nvar &lt;- var  %&gt;% select(name, label, type)\nkable(var)\n\n\n\n\n\n\n\n\n\nname\nlabel\ntype\n\n\n\n\nid\nIdentifiant\ntext\n\n\ncp\nCode Postal\ntext\n\n\npop\nPrésence\ntext\n\n\naddress\nAdresse\ntext\n\n\ncom_arm_name\nNom Officiel Commune / Arrondissement Municipal Majuscule\ntext\n\n\nautomate_24_24\nAutomate 24-24\ntext\n\n\ntimetable\nTimetable\ntext\n\n\nfuel\nCarburant\ntext\n\n\nshortage\nRupture\ntext\n\n\nupdate\nMise à jour\ndatetime\n\n\nprice_gazole\nPrix Gazole\ndouble\n\n\nprice_sp95\nPrix SP95\ndouble\n\n\nprice_sp98\nPrix SP98\ndouble\n\n\nprice_gplc\nPrix GPLc\ndouble\n\n\nprice_e10\nPrix E10\ndouble\n\n\nprice_e85\nPrix E85\ndouble\n\n\nservices\nServices\ntext\n\n\nbrand\nMarque\ntext\n\n\nname\nNom\ntext\n\n\ngeo_point\nGeo Point\ngeo_point_2d\n\n\ncom_arm_code\nCode officiel commune ou arrondissement\ntext\n\n\nepci_code\nCode Officiel EPCI\ntext\n\n\nepci_name\nNom Officiel EPCI\ntext\n\n\ndep_code\nCode Officiel Département\ntext\n\n\ndep_name\nNom Officiel Département\ntext\n\n\nreg_code\nCode Officiel Région\ntext\n\n\nreg_name\nNom Officiel Région\ntext\n\n\n\n\n\nOn peut transformer le programme que l’on vient d’executer en fonction pour un usage plus simple :\n\nget_variables&lt;-function(idtab = \"prix-des-carburants-j-1\") {\n  url&lt;-paste(\"https://public.opendatasoft.com/api/v2/catalog/datasets/\",idtab,\"?\",sep=\"\")\n  x&lt;-GET(url)\n  y&lt;-fromJSON(rawToChar((x$content)))\n  var&lt;-y$dataset$fields\n  var &lt;- var %&gt;% select(name, label, type)\n  return(var)\n}\n\nOn peut désormais appliquer notre fonction sur n’importe quel autre tableau du catalogue. Par exemple, si on choisit le tableau qualite_de-lair-france on obtient la liste de variables suivante :\n\nvar&lt;-get_variables(\"qualite-de-lair-france\")\nkable(var)\n\n\n\n\nname\nlabel\ntype\n\n\n\n\ncountry\nCountry Code\ntext\n\n\ncity\nCity\ntext\n\n\nlocation\nLocation\ntext\n\n\ncoordinates\nCoordinates\ngeo_point_2d\n\n\nmeasurements_parameter\nPollutant\ntext\n\n\nmeasurements_sourcename\nSource Name\ntext\n\n\nmeasurements_unit\nUnit\ntext\n\n\nmeasurements_value\nValue\ndouble\n\n\nmeasurements_lastupdated\nLast Updated\ndatetime\n\n\ncountry_name_en\nCountry Label\ntext"
  },
  {
    "objectID": "11-API-Import-json.html#récupération-des-données",
    "href": "11-API-Import-json.html#récupération-des-données",
    "title": "API : Importation json",
    "section": "Récupération des données",
    "text": "Récupération des données\nPour des utilisateurs non spécialiste, il est difficile de lancer une requête complexe qui suppose une maîtrise avancée des API et des protocoles de requête SOAP et REST. Nous allons opter ici pour une stratégie pragmatique (mais efficace) qui consiste à :\n\nUtiliser l’interface public.opendatasoft pour rédiger une requête\nRécupérer le lien de téléchargement\nTélécharger les données correspondant à la requête\nEffectuer les opérations de nettoyage des données et réaliser un graphique\nModifier le lien et effectuer à nouveau le étapes 3 et 4\nConstruire une fonction paramétrique de téléchargement + nettoyage + visualisation …\n\nPour illustrer cette stratégie, nous allons essayer de créer dans R une fonction automatisée qui télécharge le prix du carburant d’une commune et produit un graphique montrant son évolution au cours du temps dans les dfférentes stations. Nous allons ainsi essayer de reconstituer une application assez proche de celle du ministère de l’économie intitulée “essence pas cher”.\n\n\n\nEssence pas cher\n\n\nNous ne chercherons toutefois pas à obtenir uniquement le dernier prix en date des stations mais plutôt à voir lesquelles sont les plus ou les mons chers sur une période de quelques années.\n\n1. Rédaction d’une requête sur public opendatasoft\nOn utilise les filtres de l’interface pour sélectionner la commune cible à l’aide de son code postal (ex. 94370 = Sucy-en-Brie) et du type carburant (ex. Gazole) :\n\n\n\nFiltres\n\n\n\n\n2. Récupération du lien de téléchargement\nUne fois terminée la mise en place des filtres, on se déplace vers la fenêtre “Export” et on choisit le type de format de sortie que l’on souhaite obtenir. Nous pourrions obtenir des fichiers au format texte (.csv) ou tableur (.xls) mais nous allons adopter ici le format .json qui est plus universel dans le domaine de la data science et qui simplifie les transferts de données entre utilisateurs de différents langages de programmation tels que R ou Python.\nUn click de souris sur le lien nous permet de récupérer l’URL de téléchargement :\n\n\n\nURL\n\n\nMême si certains caractères spéciaux sont difficiles à comprendre comme %3A ou %22 on devine assez facilement la fonction des différents segments de la chaine de caractère qui constitue l’URL de requête :\n\nadresse du site web opendatasoft : https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/\nchoix de la base de données : prix-des-carburants-j-1\nformat d’export et langue : exports/json?lang=fr\nselection du carburant : &refine=fuel%3A%22Gazole%22\nselection de la commune par son code postal : &qv1=(94370)\nfuseau horaire (pour dater la requête) : &timezone=Europe%2FParis\n\n\n\n3. Recupération des données à partir de l’URL\nNous pouvons maintenant rédiger un petit programme très simple qui va récupérer les données à partir de ce lien\n\nlink&lt;-\"https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/prix-des-carburants-j-1/exports/json?lang=fr&refine=fuel%3A%22Gazole%22&qv1=(94370)&timezone=Europe%2FParis\"\ny&lt;-fromJSON(link)\nhead(y)\n\n        id    cp pop                     address com_arm_name automate_24_24\n1 94370007 94370   R     13 Rue Maurice Berteaux SUCY-EN-BRIE            Non\n2 94370008 94370   R 63/71 AV DU GENERAL LECLERC SUCY-EN-BRIE            Oui\n3 94370007 94370   R     13 Rue Maurice Berteaux SUCY-EN-BRIE            Non\n4 94370003 94370   R              1 Rue de Paris SUCY-EN-BRIE            Oui\n5 94370008 94370   R 63/71 AV DU GENERAL LECLERC SUCY-EN-BRIE            Oui\n6 94370003 94370   R              1 Rue de Paris SUCY-EN-BRIE            Oui\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               timetable\n1 {\"Dimanche\": {\"fermeture\": \"22.00\", \"ouvert\": 1, \"ouverture\": \"07.00\"}, \"Jeudi\": {\"fermeture\": \"23.00\", \"ouvert\": 1, \"ouverture\": \"06.00\"}, \"Lundi\": {\"fermeture\": \"23.00\", \"ouvert\": 1, \"ouverture\": \"06.00\"}, \"Mardi\": {\"fermeture\": \"23.00\", \"ouvert\": 1, \"ouverture\": \"06.00\"}, \"Mercredi\": {\"fermeture\": \"23.00\", \"ouvert\": 1, \"ouverture\": \"06.00\"}, \"Samedi\": {\"fermeture\": \"23.00\", \"ouvert\": 1, \"ouverture\": \"06.00\"}, \"Vendredi\": {\"fermeture\": \"23.00\", \"ouvert\": 1, \"ouverture\": \"06.00\"}}\n2 {\"Dimanche\": {\"fermeture\": \"21.00\", \"ouvert\": 1, \"ouverture\": \"08.00\"}, \"Jeudi\": {\"fermeture\": \"21.00\", \"ouvert\": 1, \"ouverture\": \"07.00\"}, \"Lundi\": {\"fermeture\": \"21.00\", \"ouvert\": 1, \"ouverture\": \"07.00\"}, \"Mardi\": {\"fermeture\": \"21.00\", \"ouvert\": 1, \"ouverture\": \"07.00\"}, \"Mercredi\": {\"fermeture\": \"21.00\", \"ouvert\": 1, \"ouverture\": \"07.00\"}, \"Samedi\": {\"fermeture\": \"21.00\", \"ouvert\": 1, \"ouverture\": \"08.00\"}, \"Vendredi\": {\"fermeture\": \"21.00\", \"ouvert\": 1, \"ouverture\": \"07.00\"}}\n3 {\"Dimanche\": {\"fermeture\": \"22.00\", \"ouvert\": 1, \"ouverture\": \"07.00\"}, \"Jeudi\": {\"fermeture\": \"23.00\", \"ouvert\": 1, \"ouverture\": \"06.00\"}, \"Lundi\": {\"fermeture\": \"23.00\", \"ouvert\": 1, \"ouverture\": \"06.00\"}, \"Mardi\": {\"fermeture\": \"23.00\", \"ouvert\": 1, \"ouverture\": \"06.00\"}, \"Mercredi\": {\"fermeture\": \"23.00\", \"ouvert\": 1, \"ouverture\": \"06.00\"}, \"Samedi\": {\"fermeture\": \"23.00\", \"ouvert\": 1, \"ouverture\": \"06.00\"}, \"Vendredi\": {\"fermeture\": \"23.00\", \"ouvert\": 1, \"ouverture\": \"06.00\"}}\n4                                                                                                                                                                                                                                                                                                                     {\"Dimanche\": {\"ouvert\": 1}, \"Jeudi\": {\"ouvert\": 1}, \"Lundi\": {\"ouvert\": 1}, \"Mardi\": {\"ouvert\": 1}, \"Mercredi\": {\"ouvert\": 1}, \"Samedi\": {\"ouvert\": 1}, \"Vendredi\": {\"ouvert\": 1}}\n5 {\"Dimanche\": {\"fermeture\": \"21.00\", \"ouvert\": 1, \"ouverture\": \"08.00\"}, \"Jeudi\": {\"fermeture\": \"21.00\", \"ouvert\": 1, \"ouverture\": \"07.00\"}, \"Lundi\": {\"fermeture\": \"21.00\", \"ouvert\": 1, \"ouverture\": \"07.00\"}, \"Mardi\": {\"fermeture\": \"21.00\", \"ouvert\": 1, \"ouverture\": \"07.00\"}, \"Mercredi\": {\"fermeture\": \"21.00\", \"ouvert\": 1, \"ouverture\": \"07.00\"}, \"Samedi\": {\"fermeture\": \"21.00\", \"ouvert\": 1, \"ouverture\": \"08.00\"}, \"Vendredi\": {\"fermeture\": \"21.00\", \"ouvert\": 1, \"ouverture\": \"07.00\"}}\n6                                                                                                                                                                                                                                                                                                                     {\"Dimanche\": {\"ouvert\": 1}, \"Jeudi\": {\"ouvert\": 1}, \"Lundi\": {\"ouvert\": 1}, \"Mardi\": {\"ouvert\": 1}, \"Mercredi\": {\"ouvert\": 1}, \"Samedi\": {\"ouvert\": 1}, \"Vendredi\": {\"ouvert\": 1}}\n               fuel                   shortage                    update\n1 Gazole, E10, SP98            SP95, E85, GPLc 2024-07-19T23:50:00+02:00\n2            Gazole E85, SP95, GPLc, E10, SP98 2022-10-24T00:01:00+02:00\n3 Gazole, E10, SP98      SP95, E85, SP95, GPLc 2022-11-08T00:01:00+01:00\n4 Gazole, E10, SP98                       SP95 2025-01-22T06:51:00+01:00\n5 Gazole, E10, SP98            SP95, E85, GPLc 2022-12-06T00:01:00+01:00\n6 Gazole, E10, SP98                       SP95 2024-12-10T06:41:00+01:00\n  price_gazole price_sp95 price_sp98 price_gplc price_e10 price_e85\n1     0.001778         NA   0.001988         NA  0.001878        NA\n2     0.001818         NA         NA         NA        NA        NA\n3     0.001847         NA   0.001679         NA  0.001569        NA\n4     0.001784         NA   0.001928         NA  0.001818        NA\n5     0.001833         NA   0.001759         NA  0.001649        NA\n6     0.001668         NA   0.001822         NA  0.001730        NA\n                                                                                                                                                                                                                              services\n1 Boutique alimentaire, Boutique non alimentaire, Restauration à emporter, Vente de fioul domestique, Station de gonflage, Carburant additivé, Lavage automatique, Vente de gaz domestique (Butane, Propane), Wifi, Automate CB 24, 24\n2                     Boutique alimentaire, Boutique non alimentaire, Station de gonflage, Carburant additivé, Lavage automatique, Lavage manuel, Vente de gaz domestique (Butane, Propane), DAB (Distributeur automatique de billets)\n3 Boutique alimentaire, Boutique non alimentaire, Restauration à emporter, Vente de fioul domestique, Station de gonflage, Carburant additivé, Lavage automatique, Vente de gaz domestique (Butane, Propane), Wifi, Automate CB 24, 24\n4                                                                                                                                                                                                                                 NULL\n5                     Boutique alimentaire, Boutique non alimentaire, Station de gonflage, Carburant additivé, Lavage automatique, Lavage manuel, Vente de gaz domestique (Butane, Propane), DAB (Distributeur automatique de billets)\n6                                                                                                                                                                                                                                 NULL\n         brand              name geo_point.lon geo_point.lat com_arm_code\n1        Total       SARL DURMUS       2.51743      48.77333        94071\n2         &lt;NA&gt;              &lt;NA&gt;            NA            NA         &lt;NA&gt;\n3        Total       SARL DURMUS       2.51743      48.77333        94071\n4 Esso Express ESSO PETIT MARAIS       2.49956      48.77306        94071\n5         &lt;NA&gt;              &lt;NA&gt;            NA            NA         &lt;NA&gt;\n6 Esso Express ESSO PETIT MARAIS       2.49956      48.77306        94071\n  epci_code                epci_name dep_code     dep_name reg_code\n1 200054781 Métropole du Grand Paris       94 Val-de-Marne       11\n2      &lt;NA&gt;                     &lt;NA&gt;     &lt;NA&gt;         &lt;NA&gt;     &lt;NA&gt;\n3 200054781 Métropole du Grand Paris       94 Val-de-Marne       11\n4 200054781 Métropole du Grand Paris       94 Val-de-Marne       11\n5      &lt;NA&gt;                     &lt;NA&gt;     &lt;NA&gt;         &lt;NA&gt;     &lt;NA&gt;\n6 200054781 Métropole du Grand Paris       94 Val-de-Marne       11\n       reg_name\n1 Île-de-France\n2          &lt;NA&gt;\n3 Île-de-France\n4 Île-de-France\n5          &lt;NA&gt;\n6 Île-de-France\n\n\nA la différence de la méthode GET vue au chapitre précédent, nous récupérons directement le fichier de données sans avoir besoin d’effectuer des transformations de type RawToChar. C’est donc beaucoup plus simple mais, en contrepartie, nous perdons toute une série d’informations qu’apportait la procédure dans les règles de l’art (date de téléchargement, messages d’erreur, version des données, etc.).\n\n\n4. Nettoyage des données\nNous procédons ensuite à un petit nettoyage pour ne garder que les variables utiles :\n\nnames(y)\n\n [1] \"id\"             \"cp\"             \"pop\"            \"address\"       \n [5] \"com_arm_name\"   \"automate_24_24\" \"timetable\"      \"fuel\"          \n [9] \"shortage\"       \"update\"         \"price_gazole\"   \"price_sp95\"    \n[13] \"price_sp98\"     \"price_gplc\"     \"price_e10\"      \"price_e85\"     \n[17] \"services\"       \"brand\"          \"name\"           \"geo_point\"     \n[21] \"com_arm_code\"   \"epci_code\"      \"epci_name\"      \"dep_code\"      \n[25] \"dep_name\"       \"reg_code\"       \"reg_name\"      \n\ndon &lt;- y %&gt;% select(name,address, update, price = price_gazole ) %&gt;% \n  mutate(update =as.Date(update)) %&gt;%\n  arrange(update)\n\nIl y a toutefois une mauvaise surprise … les données semblent erronées à partir d’une certaine date\n\nggplot(don) +aes(x=update, y=price, col=address) + geom_point()\n\n\n\n\nEn fait … les chiffres qui sont fournis après le 26 mars ont été divisés mystérieusement par 1000. Il faut donc corriger ce problème :\n\nlibrary(ggplot2)\ndon&lt;-don %&gt;%  mutate(price_OK = case_when(price ==0 ~ NA,\n                             price &lt; 1 ~ price*1000,\n                             TRUE ~ price))\nggplot(don) +aes(x=update, y=price_OK, col=address) + geom_point()\n\n\n\n\nOn note qu’il este une valeur aberrante mais sinon il est désormais possible de bien suivre l’évolution des prix au cours des trois dernières années et de repérer quelles est la station la moins chèr aux différentes dates.\n\n\n5. Changement de lien\nEssayons maintenant de reprendre l’ensemble de notre programme en changeant juste de commune dans le lien initial. On va ici soigner la rédaction du programme car nous comptons ensuite le transformer en fonction\nOn remplace le code postal de Sucy-en-Brie (94370) par celui d’Ivry-sur-Seine(94200).\n\n# Choix du lien (changement du code postal)\nlink&lt;-\"https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/prix-des-carburants-j-1/exports/json?lang=fr&refine=fuel%3A%22Gazole%22&qv1=(94200)&timezone=Europe%2FParis\"\n\n# Importation des données\ny&lt;-fromJSON(link)\n\n# Selection des variables\ndon &lt;- y %&gt;% select(name,address, update, price = price_gazole ) %&gt;% \n  mutate(update =as.Date(update)) %&gt;%\n  arrange(update)\n\n# Nettoyage des erreurs principales\ndon&lt;-don %&gt;%  mutate(price_OK = case_when(price ==0 ~ NA,\n                             price &lt; 1 ~ price*1000,\n                             TRUE ~ price))\n\n# Réalisation d'un graphique\nggplot(don) +aes(x=update, y=price_OK, col=address) + geom_point()\n\n\n\n\n\n\n6. Rédaction d’une Fonction\nOn peut maintenant écrire une fonction qui ne va dépendre que du code postal et va fournir en sortie le tableau de données. Tout ce que nous avons à faire est de modifier le lien en fonction du code postal qui sera le paramètre de la fonction.\nPour cela nous utilisons la commande R pasteO()qui permet de coller des chaînes de caractères sans ajouter d’expaces. Ici nous recollons le début de l’URL, le code de la commune que nous avons modifié et la fin de l’URL.\n\ngazole_tab &lt;- function(code=\"94370\") { \n# Choix du lien (changement du code postal)\nlink&lt;-paste0(\"https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/prix-des-carburants-j-1/exports/json?lang=fr&refine=fuel%3A%22Gazole%22&qv1=(\", code,\")&timezone=Europe%2FParis\")\n\n# Importation des données\ny&lt;-fromJSON(link)\n\n# Selection des variables\ntab &lt;- y %&gt;% select(name,address, update, price = price_gazole ) %&gt;% \n  mutate(update =as.Date(update)) %&gt;%\n  arrange(update)\n\n# Nettoyage des erreurs principales\ntab&lt;-tab %&gt;%  mutate(price_OK = case_when(price ==0 ~ NA,\n                             price &lt; 1 ~ price*1000,\n                             TRUE ~ price))\n\nreturn(tab)\n\n}\n\nPour tester notre fonction gazole_tab(), on prend en exemple une nouvelle commune, par exemple Saint-Maur des Fossés (94100) :\n\nres&lt;-gazole_tab(\"94100\")\nhead(res)\n\n              name            address     update price price_OK\n1             &lt;NA&gt;   57 BD DE CRETEIL 2021-02-18 1.499    1.499\n2 Carrefour Market    57, Rue Delenue 2021-02-18 1.366    1.366\n3        ESSO FOCH 99/101 Avenue Foch 2021-02-18 1.366    1.366\n4             &lt;NA&gt;  29 bvd de créteil 2021-02-18 1.452    1.452\n5 Carrefour Market    57, Rue Delenue 2021-02-19 1.371    1.371\n6        ESSO FOCH 99/101 Avenue Foch 2021-02-19 1.371    1.371\n\n\nMais on pourrait aussi faire une fonction gazole_graph()qui renvoie non pas le tableau mais le graphique :\n\ngazole_graph &lt;- function(code=\"94370\") { \n# Choix du lien (changement du code postal)\nlink&lt;-paste0(\"https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/prix-des-carburants-j-1/exports/json?lang=fr&refine=fuel%3A%22Gazole%22&qv1=(\", code,\")&timezone=Europe%2FParis\")\n\n# Importation des données\ny&lt;-fromJSON(link)\n\n# Selection des variables\ndon &lt;- y %&gt;% select(name,address, update, price = price_gazole ) %&gt;% \n  mutate(update =as.Date(update)) %&gt;%\n  arrange(update)\n\n# Nettoyage des erreurs principales\ndon&lt;-don %&gt;%  mutate(price_OK = case_when(price ==0 ~ NA,\n                             price &lt; 1 ~ price*1000,\n                             TRUE ~ price))\n\n# Réalisation d'un graphique\ngraph&lt;-ggplot(don) +aes(x=update, y=price_OK, col=address) + geom_point()\n\nreturn(graph)\n\n}\n\nOn teste la fonction sur Saint-Maur des Fossés (94100) :\n\ngazole_graph(\"94100\")\n\n\n\n\nMais le plus intéressant est de faire une fonction unique gazole()qui permet de renvoyer à la fois le tableau et le graphique en indiquant en sortie une liste d’objets comprenant à la fois le tableau (objet de type data.frame) et le graphique (objet de type ggplot2).\n\ngazole &lt;- function(code=\"94370\") { \n# Choix du lien (changement du code postal)\nlink&lt;-paste0(\"https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/prix-des-carburants-j-1/exports/json?lang=fr&refine=fuel%3A%22Gazole%22&qv1=(\", code,\")&timezone=Europe%2FParis\")\n\n# Importation des données\ny&lt;-fromJSON(link)\n\n# Selection des variables\ntab &lt;- y %&gt;% select(name,address, update, price = price_gazole ) %&gt;% \n  mutate(update =as.Date(update)) %&gt;%\n  arrange(update)\n\n# Nettoyage des erreurs principales\ntab&lt;-tab %&gt;%  mutate(price_OK = case_when(price ==0 ~ NA,\n                             price &lt; 1 ~ price*1000,\n                             TRUE ~ price))\n\n# Réalisation d'un graphique\ngraph&lt;-ggplot(don) +aes(x=update, y=price_OK, col=address) + geom_point()\n\nreturn(list(\"tab\"=tab, \"graph\"=graph))\n\n}\n\nIl suffit maintenant d’executer une seule fois la fonction (un seul appel de l’API) pour pouvoir ensuite au choix utiliser le tableau ou afficher le graphique.\n\nres&lt;-gazole(\"94100\")\nhead(res$tab)\n\n              name            address     update price price_OK\n1             &lt;NA&gt;   57 BD DE CRETEIL 2021-02-18 1.499    1.499\n2 Carrefour Market    57, Rue Delenue 2021-02-18 1.366    1.366\n3        ESSO FOCH 99/101 Avenue Foch 2021-02-18 1.366    1.366\n4             &lt;NA&gt;  29 bvd de créteil 2021-02-18 1.452    1.452\n5 Carrefour Market    57, Rue Delenue 2021-02-19 1.371    1.371\n6        ESSO FOCH 99/101 Avenue Foch 2021-02-19 1.371    1.371\n\nres$graph"
  },
  {
    "objectID": "11-API-Import-json.html#conclusion",
    "href": "11-API-Import-json.html#conclusion",
    "title": "API : Importation json",
    "section": "Conclusion",
    "text": "Conclusion\nCe chapitre a permis de combiner trois apprentissages fondamentaux du data mining qui seront repris ensuie à plusieurs reprises :\n\nUtiliser des API pour récupérer directement ses données sans effectuer de téléchargement “à la main”.\nNettoyer les données reçues avant de les utiliser et automatiser autant que possible les procédures de nettoyages.\nCréer ses propres fonctions pour automatiser les tâches de récupération des données, nettoyage et production de tableaux ou graphiques."
  },
  {
    "objectID": "12-API-Import-geojson.html",
    "href": "12-API-Import-geojson.html",
    "title": "API - Importation geojson",
    "section": "",
    "text": "Le but de ce dernier sous-chapitre est d’approfondir les méthodes de recueil de données lorsque celles-ci comportent une information géographique sur la localisation des objets étudiés. Nous allons donc charger non plus seulement des tableaux statistiques mais aussi de l’information géographique décrivant la localisation de poins, lignes ou polygones. Cela implique deux nouveautés :\n\nl’utilisation du format de transfert GEOJSON qui est une extension de JSON au cas de l’information géographique et qui est importable dans R avec le pakage spatial features (sf).\nla cartographie rapide d’un fichier sf en mode statique ou dynamique à l’aide du package tmap.\n\nNous verrons en détail l’utilisation des données géographiques dans les chapitres ultérieurs et on se bornera ici à analyser comment recueillir cette information à l’aide d’une API. On va récupérer cette fois-ci des données au format geojson.\nOn charge les packages utiles :\n\nknitr::opts_chunk$set(echo = TRUE, warning= FALSE, message = FALSE, error=FALSE)\n\n## Affichage de tableaux\nlibrary(knitr)\n\n## Requêtes web\nlibrary(httr)\nlibrary(jsonlite)\n\n# Cartographie rapide\nlibrary(sf)\nlibrary(tmap)\n\n## Tidyverse & co\nlibrary(dplyr, warn.conflicts = T, quietly = T)\n\n\n1. Récupération par lien de télécgargement\nNous avons récupéré un lien de téléchargement sur le site public.opendatasoft mais en utilisant le format geojson\n\nlink&lt;-\"https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/indice-de-defavorisation-sociale-fdep-par-iris/exports/geojson?lang=fr&refine=c_nom_com%3A%22SUCY-EN-BRIE%22&timezone=Europe%2FBerlin\"\nmap&lt;-st_read(link,quiet = T)\nclass(map)\n\n[1] \"sf\"         \"data.frame\"\n\n\nOn voit que le fichier possède maintenant un attribut sf (spatial features) en plus de l’attribut data.frame\n\n\n2. Examen des variables\n\nsummary(map)\n\n geo_point_2d          t1_com            t1_p09_pop    c_dcomiris       \n Length:11          Length:11          Min.   :1659   Length:11         \n Class :character   Class :character   1st Qu.:2152   Class :character  \n Mode  :character   Mode  :character   Median :2345   Mode  :character  \n                                       Mean   :2357                     \n                                       3rd Qu.:2631                     \n                                       Max.   :3040                     \n   t1_txbac09      t1_rev_med     c_typ_iris         c_nom_iris       \n Min.   :34.93   Min.   :15379   Length:11          Length:11         \n 1st Qu.:45.02   1st Qu.:22561   Class :character   Class :character  \n Median :53.82   Median :26249   Mode  :character   Mode  :character  \n Mean   :51.38   Mean   :25002                                        \n 3rd Qu.:58.10   3rd Qu.:28612                                        \n Max.   :63.59   Max.   :32571                                        \n  c_nom_com           t1_txchom0       t1_txouvr0       nom_epci        \n Length:11          Min.   : 4.246   Min.   : 7.070   Length:11         \n Class :character   1st Qu.: 5.392   1st Qu.: 8.415   Class :character  \n Mode  :character   Median : 6.681   Median :10.054   Mode  :character  \n                    Mean   : 7.661   Mean   :13.668                     \n                    3rd Qu.: 8.514   3rd Qu.:19.649                     \n                    Max.   :14.924   Max.   :25.548                     \n   nom_dep            nom_reg                   geometry \n Length:11          Length:11          POLYGON      :11  \n Class :character   Class :character   epsg:4326    : 0  \n Mode  :character   Mode  :character   +proj=long...: 0  \n                                                         \n                                                         \n                                                         \n\n\n\n\n3. Cartographie statique\nOn réalise une carte statique avec le package tmap qui sera expliqué dans la suite du cours :\n\ntmap_mode(\"plot\") +\ntm_shape(map) + \n  tm_polygons(\"t1_txchom0\") +\n   tm_legend(title=\"SUCY-EN-BRIE\")\n\n\n\n\n\n\n3. Cartographie dynamique\nOn réalise une carte dynamique avec le même package tmap en changeant juste le mode\n\ntmap_mode(\"view\") +\ntm_shape(map) + \n  tm_polygons(\"t1_txchom0\")  + \n  tm_legend(title=\"SUCY-EN-BRIE\")\n\n\n\n\n\n\n\n\n5. Rédaction d’une fonction\nOn peut maintenant écrire une fonction qui va dépendre de trois paramètre : - nom de la commune en majuscule - mode cartographique - variable.\n\ncarto_com &lt;- function(nomcom=\"SUCY-EN-BRIE\", modecarto=\"plot\", choixvar=\"t1_txchom0\") { \n\nlink&lt;-paste0(\"https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/indice-de-defavorisation-sociale-fdep-par-iris/exports/geojson?lang=fr&refine=c_nom_com%3A%22\",nomcom,\"%22&timezone=Europe%2FBerlin\")\n\n# Importation des données\nmap&lt;-st_read(link, quiet=T)\n\n# Affichage de la carte\n\ntmap_mode(modecarto) +\n tm_shape(map) +\n  tm_polygons(choixvar) +   \n  tm_legend(title=nomcom)\n\n}\n\n\n\n6. Test de la fonction\nPour tester notre fonction carto_com(), on prend l’exemple de la commune de Fontenay-sous-Bois dont on veut visualiser le revenu médian en mode statique\n\ncarto_com(\"FONTENAY-SOUS-BOIS\",\"plot\",\"t1_rev_med\")\n\n\n\n\nOn peut de la même manière visualiser le taux de chômage à Ivry-sur-Seine en mode dynamique :\n\ncarto_com(\"IVRY-SUR-SEINE\",\"view\",\"t1_txchom0\")"
  },
  {
    "objectID": "13-API-Exercices.html",
    "href": "13-API-Exercices.html",
    "title": "API : Exercices",
    "section": "",
    "text": "Télécharger le dossier projet\nCommencez par reprendre une série d’exercices d’application du cours du chapitre précédent en allant des applications les plus simples au plux complexes.\nVous pouvez ensuite essayer tout seul de travailler sur les demandes de valeurs foncières géoloalisées que l’on peut trouver sur le site public.opendatasoft"
  },
  {
    "objectID": "13-API-Exercices.html#etape-1-récupération-et-analyse-dun-tableau-unique",
    "href": "13-API-Exercices.html#etape-1-récupération-et-analyse-dun-tableau-unique",
    "title": "API : Exercices",
    "section": "Etape 1 : Récupération et analyse d’un tableau unique",
    "text": "Etape 1 : Récupération et analyse d’un tableau unique\n\nProblème\nEssayez de récupérer à l’aide d’une API les informations sur l’ensemble des ventes immobilières de maisons de la commune de Montcuq-en-Quercy-Blanc (code INSEE = 46201) au cours de l’année 2020. Vous devez ensuite\n\nAfficher les premières lignes du tableau des ventes de maisons à Moncuq en en 2020\nCalculer le nombre de ventes et leur prix moyen au m2\nRéaliser un histogramme du prix moyen de ces ventes sur lequel figureront le nombre de ventes et le prix moyen.\n\n\n\nSolution\nVous devez obtenir les résultats suivants :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDate\nCommune\nCode\nSurf_hab\nSurf_ter\nPrix\nPrix_m2\n\n\n\n\n2020-01-06\nMontcuq-en-Quercy-Blanc\n46201\n280\n450\n270000\n964\n\n\n2020-01-31\nMontcuq-en-Quercy-Blanc\n46201\n60\n1258\n60000\n1000\n\n\n2020-02-07\nMontcuq-en-Quercy-Blanc\n46201\n27\n1275\n187000\n6926\n\n\n2020-02-07\nMontcuq-en-Quercy-Blanc\n46201\n79\n1275\n187000\n2367\n\n\n2020-02-18\nMontcuq-en-Quercy-Blanc\n46201\n161\n860\n365000\n2267\n\n\n2020-02-18\nMontcuq-en-Quercy-Blanc\n46201\n74\n500\n365000\n4932\n\n\n\n\n\n[1] \"Il ya eu 44 ventes au prix moyen de 1983 €/m2\""
  },
  {
    "objectID": "13-API-Exercices.html#etape-2-tableau-de-bord-dune-commune",
    "href": "13-API-Exercices.html#etape-2-tableau-de-bord-dune-commune",
    "title": "API : Exercices",
    "section": "Etape 2 : Tableau de bord d’une commune",
    "text": "Etape 2 : Tableau de bord d’une commune\n\nProblème\nEssayez de récupérer à l’aide d’une API les informations sur l’ensemble des ventes immobilières de maisons ou d’appartement de la commune de Sucy-en-Brie (Code INSEE = 94071)\n\nSimplifiez le tableau pour ne garder que les variables suivantes\n\n\ndate : date de la transaction\ncode : code INSEE de la commune\nbien : type de bien (maison ou appartement)\nnom : nom de la commune\nprix : prix de vente total\nsurf : surface habitable\nprixm2 : prix au m2\n\n\nNettoyer le tableau en retirant les transactions dont le prix au m2 est supérieur à 10000€\nCréez un tableau montrant l’évolution par année des prix médian au m2 des maisons et des appartements.\nCréez un graphique montrant l’évolution mensuelle des prix au m2 des maisons et des appartements.\n\n\n\nSolution\nVous devez obtenir les résultats suivants :\n\n\n\n\n\ndate\ncode\nnom\nbien\nprix\nsurf\nprix_m2\n\n\n\n\n2014-01-10\n94071\nSucy-en-Brie\nAppartement\n212000\n62\n3419\n\n\n2014-01-16\n94071\nSucy-en-Brie\nMaison\n640000\n145\n4414\n\n\n2014-01-16\n94071\nSucy-en-Brie\nMaison\n640000\n145\n4414\n\n\n2014-01-17\n94071\nSucy-en-Brie\nAppartement\n115480\n45\n2566\n\n\n2014-01-21\n94071\nSucy-en-Brie\nMaison\n390000\n132\n2955\n\n\n2014-01-23\n94071\nSucy-en-Brie\nMaison\n690300\n140\n4931\n\n\n\n\n\n\nPrix médian de vente des maisons et appartement (en €/m2)\n\n\nAnnée\nVentes d’appartements\nVentes de maisons\n\n\n\n\n2014\n3200\n3666\n\n\n2015\n2889\n3541\n\n\n2016\n3069\n3636\n\n\n2017\n3249\n3783\n\n\n2018\n3455\n3753\n\n\n2019\n3524\n4141"
  },
  {
    "objectID": "13-API-Exercices.html#etape-3-automatisation",
    "href": "13-API-Exercices.html#etape-3-automatisation",
    "title": "API : Exercices",
    "section": "Etape 3 : Automatisation",
    "text": "Etape 3 : Automatisation\nEcrivez le progamme de l’exercice 2 sous la forme d’une fonction prenant en entrée le code INSEE d’une commune quelconque."
  }
]